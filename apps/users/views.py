from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate
from django.contrib.auth.hashers import make_password
from django.core.mail import send_mail,BadHeaderError
from django.http import JsonResponse, HttpResponse
from django.contrib.auth import logout
from django.contrib.auth.decorators import login_required
import requests
from django.views.decorators.csrf import csrf_exempt
from decimal import Decimal

from apps.settings.models import Setting
from apps.cart.models import CartItem
from apps.products.models import Product, Category
from apps.users.models import User
from apps.billings.models import Billings, BillingProduct
from apps.secondary.models import Subscribe

# Create your views here.
@login_required(login_url='/user/register/') 
def checkout(request):
    setting = Setting.objects.latest('id')
    products = Product.objects.all()
    categories = Category.objects.all()
    cart_items = CartItem.objects.all()

    if request.user.is_authenticated:
        cart_items = CartItem.objects.filter(user=request.user)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –∫–æ—Ä–∑–∏–Ω–∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ —Å–µ—Å—Å–∏–∏
        session_key = request.session.session_key
        if not session_key:
            request.session.create()
        cart_items = CartItem.objects.filter(session_key=session_key)
    
    cart_items_count = cart_items.count()
    if 'email_send' in request.POST:
            email = request.POST.get('email')
            try:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                Subscribe.objects.create(email=email)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
                send_mail(
                    '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É',  # Subject
                    f'–í–∞—à–∞ –ø–æ—á—Ç–∞: {email}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!',  # Message
                    'noreply@somehost.local',  # From email
                    [email],  # To email
                    fail_silently=False,
                )
                return redirect('contact')
            except BadHeaderError:
                return JsonResponse({'error': 'Invalid header found.'}, status=500)
            except ConnectionRefusedError as e:
                return JsonResponse({'error': f'Connection refused: {e}'}, status=500)

    if request.user.is_authenticated:
        cart_items = CartItem.objects.filter(user=request.user)
    else:
        session_key = request.session.session_key
        cart_items = CartItem.objects.filter(session_key=session_key)

    delivery_cost = 250
    total_price = sum([cart_items.total for cart_items in cart_items])
    if total_price < 1500:
        total_price += delivery_cost  
    else:
        free_delivery = True
    

    if request.method == "POST":
        if 'checkout_form' in request.POST:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
            first_name = request.POST.get('first_name')
            last_name = request.POST.get('last_name')
            phone = request.POST.get('phone')
            address = request.POST.get('address')
            city = request.POST.get('city')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            try:
                page_contact = Billings.objects.create(
                    first_name=first_name,
                    last_name=last_name,
                    address=address,
                    phone=phone,
                    city=city
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
                return HttpResponse("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", status=500)

            if not cart_items.exists():
                print("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Å—Å–∏–∏")
                return HttpResponse("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", status=400)

            items_text = ""
            for cart_product in cart_items:
                BillingProduct.objects.create(
                    product=cart_product.product,
                    quantity=cart_product.quantity,
                    price=cart_product.price,
                    billing=page_contact
                )
                items_text += f"{cart_product.product.title} - {cart_product.quantity} —à—Ç. –ø–æ —Ü–µ–Ω–µ {cart_product.price} –∫–∞–∂–¥—ã–π\n"
                total_price = Decimal(0)  # Initialize as a Decimal
                for cart_product in cart_items:
                    total_price += cart_product.quantity * cart_product.price  # Ensure this is a numeric operation

                # Convert to string when displaying
                total_price_display = f"{total_price:.2f}"
                
            message = f"""
    –û—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ üõµ
                        
    –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_name}
    –ê–¥—Ä–µ—Å: {address}
    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
    –ì–æ—Ä–æ–¥: {city}
            
–¢–æ–≤–∞—Ä—ã:
{items_text}

–û–±—â–∞—è —Å—É–º–º–∞: {delivery_cost+total_price} —Å–æ–º–æ–≤
–≤–º–µ—Å—Ç–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
    """
            send_telegram_message(message)
            
            cart_items.delete()  
            request.session.flush() 
            
            return redirect('confirm')
    return render(request, 'user/checkout.html', locals())

def send_telegram_message(message):
    bot_token = '7409456892:AAGNoJmrIyX6_QHmsjv42fQVPnSMJLuW_wQ'
    chat_id = '6564825140'
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'HTML'
    }
    response = requests.post(url, data=payload)
    if response.status_code != 200:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {response.text}")
    else:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")

def register(request):
    setting = Setting.objects.latest('id')
    cart_items = CartItem.objects.all()
    if request.user.is_authenticated:
        cart_items = CartItem.objects.filter(user=request.user)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –∫–æ—Ä–∑–∏–Ω–∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ —Å–µ—Å—Å–∏–∏
        session_key = request.session.session_key
        if not session_key:
            request.session.create()
        cart_items = CartItem.objects.filter(session_key=session_key)
    
    cart_items_count = cart_items.count()
    if 'email_send' in request.POST:
            email = request.POST.get('email')
            try:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                Subscribe.objects.create(email=email)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
                send_mail(
                    '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É',  # Subject
                    f'–í–∞—à–∞ –ø–æ—á—Ç–∞: {email}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!',  # Message
                    'noreply@somehost.local',  # From email
                    [email],  # To email
                    fail_silently=False,
                )
                return redirect('contact')
            except BadHeaderError:
                return JsonResponse({'error': 'Invalid header found.'}, status=500)
            except ConnectionRefusedError as e:
                return JsonResponse({'error': f'Connection refused: {e}'}, status=500)
    if request.method == "POST":
        if 'register_button' in request.POST:
            username = request.POST.get('username')
            email = request.POST.get('email')
            password = request.POST.get('password')
            confirm_password = request.POST.get('confirm_password')

            errors = {}

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
            if not username or not email or not password:
                errors['fields'] = 'All fields must be filled.'

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
            if password != confirm_password:
                errors['password'] = 'Passwords must match.'

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if User.objects.filter(username=username).exists():
                errors['username'] = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.'

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
            if User.objects.filter(email=email).exists():
                errors['email'] = 'Email —É–∂–µ –∑–∞–Ω—è—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π.'

            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º—É —Å –æ—à–∏–±–∫–∞–º–∏
            if errors:
                return render(request, 'user/register.html', locals())  

            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(username=username, email=email)
            user.password = make_password(password)
            user.save()

            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            return redirect('index') 
    return render(request, 'user/register.html', locals())

def login1(request):
    setting = Setting.objects.latest('id')
    cart_items = CartItem.objects.all()
    if request.user.is_authenticated:
        cart_items = CartItem.objects.filter(user=request.user)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –∫–æ—Ä–∑–∏–Ω–∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ —Å–µ—Å—Å–∏–∏
        session_key = request.session.session_key
        if not session_key:
            request.session.create()
        cart_items = CartItem.objects.filter(session_key=session_key)
    
    cart_items_count = cart_items.count()
    if 'email_send' in request.POST:
            email = request.POST.get('email')
            try:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                Subscribe.objects.create(email=email)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
                send_mail(
                    '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É',  # Subject
                    f'–í–∞—à–∞ –ø–æ—á—Ç–∞: {email}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!',  # Message
                    'noreply@somehost.local',  # From email
                    [email],  # To email
                    fail_silently=False,
                )
                return redirect('contact')
            except BadHeaderError:
                return JsonResponse({'error': 'Invalid header found.'}, status=500)
            except ConnectionRefusedError as e:
                return JsonResponse({'error': f'Connection refused: {e}'}, status=500)
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return JsonResponse({'success': True, 'redirect_url': '/'})  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
        else:
            return JsonResponse({'success': False, 'error': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å'})


    
    return render(request, 'user/login.html', locals())


def user_logout(request):
    logout(request)
    return redirect('/')

@csrf_exempt  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–∏—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
def subscribe(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        if email:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞
            return JsonResponse({"success": True})
        else:
            return JsonResponse({"success": False}, status=400)
    return JsonResponse({"success": False}, status=400)

def confirm(request):
    setting = Setting.objects.latest('id')
    cart_items = CartItem.objects.all()
    cart_items_count = cart_items.count()
    return render(request, 'user/confirm.html', locals())
